//
// Generated file, do not edit! Created by nedtool 5.2 from common/word.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __WORD_M_H
#define __WORD_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include <cstdint>
// }}

/**
 * Enum generated from <tt>common/word.msg:5</tt> by nedtool.
 * <pre>
 * enum InstructionType
 * {
 * 
 *     R = 0;
 *     I = 1;
 *     J = 2;
 * }
 * </pre>
 */
enum InstructionType {
    R = 0,
    I = 1,
    J = 2
};

/**
 * Class generated from <tt>common/word.msg:11</tt> by nedtool.
 * <pre>
 * message Word
 * {
 *     int32_t data;
 *     bool instructionFlag;
 *     uint8_t instructionType \@enum(InstructionType);
 * }
 * </pre>
 */
class Word : public ::omnetpp::cMessage
{
  protected:
    int32_t data;
    bool instructionFlag;
    uint8_t instructionType;

  private:
    void copy(const Word& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Word&);

  public:
    Word(const char *name=nullptr, short kind=0);
    Word(const Word& other);
    virtual ~Word();
    Word& operator=(const Word& other);
    virtual Word *dup() const override {return new Word(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int32_t getData() const;
    virtual void setData(int32_t data);
    virtual bool getInstructionFlag() const;
    virtual void setInstructionFlag(bool instructionFlag);
    virtual uint8_t getInstructionType() const;
    virtual void setInstructionType(uint8_t instructionType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Word& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Word& obj) {obj.parsimUnpack(b);}


#endif // ifndef __WORD_M_H

